#include <Arduino.h>
#include <SoftwareSerial.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>

#define OLED_RESET -1
Adafruit_SH1106 display(OLED_RESET);

const byte rxPin = 2;
const byte txPin = 3;
SoftwareSerial mySerial(rxPin, txPin);

const unsigned int MAX_BUFFER_LENGTH = 10;
const long bootAnimation = 1000;

const unsigned char epd_bitmap_frame_0_delay_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xe0, 0x00, 0x00, 0x07, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xe0, 0x00, 0x00, 0x07, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfc, 0x00, 0x00, 0x3f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xff, 0x00, 0x00, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xff, 0x00, 0x00, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xff, 0x00, 0x00, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0xff, 0x80, 0x01, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0xff, 0x80, 0x01, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xff, 0xf0, 0x07, 0xff, 0xc0, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x01, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x38, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0xff, 0xc0, 0x03, 0xff, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xff, 0x80, 0x01, 0xff, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x80, 0x01, 0xff, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0xff, 0x00, 0x00, 0xff, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0xff, 0x00, 0x00, 0x7f, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0xfe, 0x00, 0x00, 0x7f, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[epd_bitmap_allArray_LEN] = {
  epd_bitmap_frame_0_delay_0,
};
bool booted = false;


void drawPercentbar(int x, int y, int width, int height, int progress) {
   progress = progress > 100 ? 100 : progress;
   progress = progress < 0 ? 0 : progress;

   float bar = ((float)(width - 4) / 100) * progress; 
   display.drawRect(x, y, width, height, WHITE);
   display.fillRect(x + 2, y + 2, bar , height - 4, WHITE);

   display.fillRect(81, 52, 1, 12, WHITE);
}

void updateDisplay(byte* buffer) {
  // Checksum is the total except checksum itself (last 2 values)
  int calculatedChecksum = 0;
  for (unsigned int i = 0; i < (MAX_BUFFER_LENGTH - 2); i++) {
    calculatedChecksum ^= buffer[i];
  }

  int receivedChecksum = buffer[MAX_BUFFER_LENGTH - 2];
  bool checksumValid = calculatedChecksum == receivedChecksum;
  // reject the message on checksum failure
  // if (!checksumValid) {
  //   return;
  // }

  float oilTemp = buffer[0];
  float oilPressure = (float)buffer[1] / 10;
  float lambda = (float)buffer[2];// / 100; /100 commented for the bar map

  // not yet implemented
  // float waterTemp = buffer[4];
  // float waterPressure = (float)buffer[3] / 10;
  // float iat = buffer[5];
  // float intakePressure = (float)buffer[6] / 10;
  // float xx = (float)buffer[7];

  for (unsigned int i = 0; i < MAX_BUFFER_LENGTH; i++) {
    if (buffer[i] < 0x10) {
      Serial.print("0");
    }
    Serial.print(buffer[i], HEX);
    Serial.print(" ");
  }

  Serial.print(":");
  Serial.print(calculatedChecksum, HEX);
  Serial.print(": ");

  if (checksumValid) {
    Serial.println("OK");
  } else {
    Serial.println("INVALID");
  }

  display.clearDisplay();
  display.setCursor(5, 0);

  // display.setTextSize(1);
  // display.print(oilTemp);
  // display.print(", ");
  // display.print(oilPressure);
  // display.print(", ");
  // display.print(lambda);
  // display.print(", ");
  // display.print(waterPressure);
  // display.print(", ");
  // display.print(lambda);
  // display.print(", ");
  // display.print(iat);
  // display.print(", ");
  // display.print(intakePressure);
  // display.print(", ");
  // if (checksumValid) {
  //   display.print(" OK");
  // } else {
  //   display.print(" INVALID");
  // }

  display.print(oilTemp, 1);
  display.setCursor(90, -14);
  display.print(".");
  display.setCursor(105, 0);
  display.print("C");

  display.setCursor(5, 30);
  display.print(oilPressure, 1);
  display.setCursor(97, 30);
  display.print("b");
  display.setCursor(110, 30);
  if (checksumValid) {
    display.print(".");
  }

  // drawbar
  lambda = map(lambda, 58, 123, 0, 100);
  drawPercentbar(0, 54, 128, 8, lambda);

  display.display();
}

void setup() {
  Serial.begin(115200);

  // Define pin modes for TX and RX
  pinMode(rxPin, INPUT);
  pinMode(txPin, OUTPUT);
  mySerial.begin(9600);

  display.begin(SH1106_SWITCHCAPVCC, 0x3C);
  display.setTextSize(3);
  display.setTextColor(WHITE);
}

void loop() {
  unsigned long currentMillis = millis();

  // Boot animation
  if (!booted) {
    unsigned long endTime = currentMillis + bootAnimation;
    while (currentMillis <= endTime) {
      currentMillis = millis();

      for (int i = 0; i < epd_bitmap_allArray_LEN; i++) {
        display.clearDisplay();
        display.drawBitmap(0, 0, epd_bitmap_allArray[i], 128, 64, WHITE);
        display.display();
        delay(50);
      }
    }
    booted = true;
  }

  // Check to see if anything is available in the serial receive buffer
  while (mySerial.available() > 0) {
    // Create a place to hold the incoming message
    static byte buffer[MAX_BUFFER_LENGTH];
    static unsigned int buffer_pos = 0;

    // Read the next available byte in the serial receive buffer
    byte inByte = mySerial.read();

    if (inByte != '\n' && (buffer_pos < sizeof(buffer) - 1)) {
      //Message coming in (check not terminating character) and guard for over message size
      //Add the incoming byte to our message
      buffer[buffer_pos] = inByte;
      buffer_pos++;
    } else {
      //Full message received...
      //Add null character to string
      buffer[buffer_pos] = '\0';

      updateDisplay(buffer);

      //Reset for the next message
      buffer_pos = 0;
    }
  }
}
